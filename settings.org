#+STARTUP: overview

* General settings
  
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
  (scroll-bar-mode -1)
  (custom-set-variables
    '(initial-frame-alist (quote ((fullscreen . maximized)))))

  ;disable backup
  (setq backup-inhibited t)
  ;disable auto save
  (setq auto-save-default nil)
#+END_SRC

* Interface tweaks

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq make-backup-files nil)
  (setq-default indent-tabs-mode nil)

  ;;always show line numbers
  (global-linum-mode)

  ;; highlight current line
  (global-hl-line-mode t)
  
  (setq-default show-trailing-whitespace t)

  ;; highlight matching parentheses
  (use-package rainbow-delimiters
    :ensure t
    :init 
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    )

  ;; show indent guides
  (use-package highlight-indent-guides
    :ensure t
    :config (progn
              (setq highlight-indent-guides-method 'character))
    :init 
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    )
    
   ;; highlight matching parentheses
   (setq show-paren-delay 0)
   (show-paren-mode 1)
#+END_SRC

* try

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
  
* which key

  Brings up some help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+END_SRC

* Swiper / Ivy / Counsel

  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))




  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy))))

  (use-package ivy-rich
    :ensure t
    :config
      (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
      (setq ivy-virtual-abbreviate 'full
        ivy-rich-switch-buffer-align-virtual-buffer t)
      (setq ivy-rich-abbreviate-paths t))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
           )
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC
  
* Evil mode
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

  ;; leader mode should be loaded before evil to work everywhere
  (use-package evil-leader
    :ensure t
    :config (progn
              (global-evil-leader-mode)
              (evil-leader/set-leader "<SPC>")
              ))

  (evil-leader/set-key
    "be" 'find-file
    "bb" 'ivy-switch-buffer
    "bk" 'kill-buffer)

  (use-package evil
    :ensure t
    :config (progn
              (add-to-list 'load-path "~/.emacs.d/evil")
              (evil-mode 1)))
              
  ;; we want this to treat underscore as a part of the word
  (with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol))

  ;; commenting things
  (use-package evil-nerd-commenter
    :ensure t
    :config (progn
              (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
              (evil-leader/set-key
                "ci" 'evilnc-comment-or-uncomment-lines
                "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
                "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
                "cc" 'evilnc-copy-and-comment-lines ; Or use `evilnc-comment-and-kill-ring-save' instead
                "cp" 'evilnc-comment-or-uncomment-paragraphs
                "cr" 'comment-or-uncomment-region
                "cv" 'evilnc-toggle-invert-comment-line-by-line
                "."  'evilnc-copy-and-comment-operator
                "\\" 'evilnc-comment-operator)
              ))

  ;; replace selection
  (use-package evil-mark-replace
    :ensure t
    :config (progn
              (evil-leader/set-key
                "sr" 'evilmr-replace-in-buffer
              )))

  ;; argument motion
  (use-package evil-args
    :ensure t
    :config (progn
              ;; bind evil-args text objects
              (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
              (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
              ))

  ;; matchit!
  (use-package evil-matchit
    :ensure t
    :config (progn
              (global-evil-matchit-mode 1)
              ))

  ;; increase/decrease numbers
  (use-package evil-numbers
    :ensure t
    :config (progn
              (evil-leader/set-key
                "a" 'evil-numbers/inc-at-pt
                "x" 'evil-numbers/dec-at-pt
              )))

  ;; surround
  (use-package evil-surround
    :ensure t
    :config (progn
              (global-evil-surround-mode 1)
              ))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))

(use-package evil-lion
  :ensure t
  :config (progn
  (evil-lion-mode)
              (evil-leader/set-key
                "sa" 'evil-lion-left
                "sA" 'evil-lion-right)))
#+END_SRC

* Project management

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
      
  (use-package perspective
    :ensure t)
      
  (use-package persp-projectile
    :ensure t
    :config 
    (persp-mode)
    (evil-leader/set-key
      "ps" 'projectile-persp-switch-project))
#+END_SRC

* Themes and modeline
#+BEGIN_SRC emacs-lisp
  (use-package color-theme
    :ensure t)

  (use-package moe-theme
     :ensure t
     :config
       (load-theme 'moe-dark t))

  (use-package powerline
    :ensure t
    :config
    (powerline-moe-theme)
    )

  (use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-center-color-theme)
    )
#+END_SRC

* Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* Slime

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
      (load (expand-file-name "~/.roswell/lisp/quicklisp/slime-helper.el"))
      (setq inferior-lisp-program "ros -L sbcl -Q run")
      ;;(setq inferior-lisp-program "ros -L ecl -Q run")
      (setq slime-contribs '(slime-fancy
                             slime-indentation
                             slime-sbcl-exts
                             slime-scratch)))
#+END_SRC

* Web development

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tmpl?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.inc?\\'" . web-mode)))
#+END_SRC

* Misc stuff

#+BEGIN_SRC emacs-lisp
  ;; move text  with M-up and M-down
  (use-package move-text
    :ensure t
    :config (progn
              (move-text-default-bindings)
              ))
#+END_SRC

